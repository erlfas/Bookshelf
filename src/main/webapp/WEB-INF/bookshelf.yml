swagger: "2.0"
info:
  description: "This is a bookshelf"
  version: "1.0.0"
  title: "Bookshelf"
  termsOfService: "localhost:8080/Bookshelf"
  contact:
    email: "ola@nordmann.no"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost:8080"
basePath: "/Bookshelf"
tags:
- name: "book"
  description: "All your books"
- name: "bookshelf"
- name: "user"
schemes:
- "http"
paths:
  /user:
    post:
      tags:
      - "user"
      summary: "Register a new user"
      description: "Register a new user"
      operationId: "registerUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "User object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "successful operation"
          schema:
            $ref: "#/definitions/AuthenticatedUser"
        400:
          description: "Invalid input"
      security:
        - UserSecurity: []
  /user/login:
    get:
      tags:
        - user
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
        - application/json
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          type: string
      responses:
        200:
          description: successful operation
          schema:
            $ref: "#/definitions/AuthenticatedUser"
          headers:
            X-Rate-Limit:
              type: integer
              format: int32
              description: calls per hour allowed by the user
            X-Expires-After:
              type: string
              format: date-time
              description: date in UTC when token expires
        400:
          description: Invalid username/password supplied
  /bookshelf:
    get:
      tags:
      - "bookshelf"
      summary: "Get a bookshelf"
      description: "Get a bookshelf"
      operationId: "getBookshelf"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: API-KEY
        in: header
        required: true
        type: string
      - in: query
        name: title
        type: string
        description: "The title of the bookshelf"
        required: true
      - in: query
        name: username
        type: string
        description: The username of the user of the bookshelf
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bookshelf"
        404:
          description: "Invalid bookshelfId"
      security:
        - UserSecurity: []
    post:
      tags:
      - "bookshelf"
      summary: "Register a new bookshelf"
      description: "Register a new bookshelf"
      operationId: "addBookshelf"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: API-KEY
        in: header
        required: true
        type: string
      - in: "body"
        name: "body"
        description: "Bookshelf"
        required: true
        schema:
          $ref: "#/definitions/BookshelfToAdd"
      responses:
        201:
          description: "created bookshelf"
          schema:
            $ref: "#/definitions/Bookshelf"
        404:
          description: "Invalid bookshelfUserId"
      security:
        - UserSecurity: []
  /bookshelf/id/{id}:
    get:
      tags:
      - "bookshelf"
      summary: "Get bookshelf by id"
      description: "Get bookshelf by id"
      operationId: "getBookshelfById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: API-KEY
        in: header
        required: true
        type: string
      - in: path
        name: id
        type: string
        description: The id of the bookshelf
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bookshelf"
        404:
          description: "Invalid bookshelfId"
      security:
        - UserSecurity: []
  /bookshelf/all:
    get:
      tags:
      - "bookshelf"
      summary: "Get all bookshelves"
      description: "Get all bookshelves"
      operationId: "getBookshelfs"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: API-KEY
        in: header
        required: true
        type: string
      - in: query
        name: username
        type: string
        description: The username of the user of the bookshelf
        required: true
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Bookshelves"
        404:
          description: "Invalid bookshelfId"
      security:
        - UserSecurity: []
  /bookshelf/id/{id}/addbook:
    post:
      tags:
      - "bookshelf"
      summary: "Add a book to a bookshelf"
      description: "Add a book to a bookshelf"
      operationId: "addBookToBookshelf"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: API-KEY
        in: header
        required: true
        type: string
      - in: path
        name: id
        type: string
        description: The id of the bookshelf
        required: true
      - name: body
        in: body
        description: Book
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        200:
          description: "successful operation"
        400:
          description: "Invalid request data"
      security:
        - UserSecurity: []
  /book:
    get:
      tags:
      - "book"
      summary: "Search for books by title"
      description: "Search for books by title"
      operationId: "getBookByTitle"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: API-KEY
        in: header
        required: true
        type: string
      - name: title
        in: query
        description: The title
        required: true
        type: string
      responses:
        200:
          description: "Success"
          schema:
            $ref: "#/definitions/Books"
        405:
          description: "Invalid input"
      security:
        - UserSecurity: []
    post:
      tags:
      - "book"
      summary: "Add a new book to the bookshelf"
      description: ""
      operationId: "addBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: API-KEY
        in: header
        required: true
        type: string
      - in: "body"
        name: "body"
        description: "Book object that needs to be added to the bookshelf"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        201:
          description: "Created"
        405:
          description: "Invalid input"
      security:
        - UserSecurity: []
  /book/id/{isbn13}:
    get:
      tags:
      - "book"
      summary: "Find book by isbn13"
      description: "Returns a single book"
      operationId: "getBookByIsbn13"
      produces:
      - "application/json"
      parameters:
      - name: isbn13
        in: path
        description: "isbn13 of book to return"
        required: true
        type: string
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid isbn13 supplied"
        404:
          description: "Book not found"
      security:
        - UserSecurity: []
    put:
      tags:
      - "book"
      summary: "Update an existing book"
      description: ""
      operationId: "updateBook"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: API-KEY
        in: header
        required: true
        type: string
      - name: isbn13
        in: path
        description: "isbn13 of book to update"
        required: true
        type: string
      - in: "body"
        name: "body"
        description: "Book object that needs to be added to the bookshelf"
        required: true
        schema:
          $ref: "#/definitions/Book"
      responses:
        200:
            description: "Updated book"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
        405:
          description: "Validation exception"
      security:
        - AdminSecurity: []
    delete:
      tags:
      - "book"
      summary: "Deletes a book"
      description: ""
      operationId: "deleteBook"
      produces:
      - "application/json"
      parameters:
      - name: API-KEY
        in: header
        required: true
        type: string
      - name: "isbn13"
        in: "path"
        description: "Book isbn13 to delete"
        required: true
        type: "string"
      responses:
        200:
            description: "Deleted book"
        400:
          description: "Invalid isbn13 supplied"
        404:
          description: "Book not found"
      security:
        - AdminSecurity: []
  /book/{isbn13}/uploadImage:
    post:
      tags:
      - "book"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: API-KEY
        in: header
        required: true
        type: string
      - name: "isbn13"
        in: "path"
        description: "isbn13 of book to update"
        required: true
        type: "string"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
      responses:
        200:
          description: "successful operation"
      security:
        - AdminSecurity: []
securityDefinitions:
  UserSecurity:
    type: apiKey
    in: header
    name: SIMPLE-API-KEY
  AdminSecurity:
    type: apiKey
    in: header
    name: ADMIN-API-KEY
security:
  - UserSecurity: [] 
  - AdminSecurity: []
definitions:
  Bookshelves:
    type: object
    properties:
      bookshelves:
        type: array
        items:
          $ref: "#/definitions/Bookshelf"
  Bookshelf:
    type: object
    properties:
      id:
        type: string
        example: 1
      title:
        type: string
        example: Fiction
      username:
        type: string
        example: john@smith.com
      books:
        type: array
        items:
          $ref:  "#/definitions/Book"
  BookshelfToAdd:
    type: object
    properties:
      title:
        type: string
        example: Fiction
      username:
        type: string
        example: john@smith.com
  Book:
    type: "object"
    properties:
      isbn13:
        type: string
      isbn10:
        type: string
      title:
        type: string
      published:
        type: string
      publisher:
        type: string
      edition:
        type: integer
        format: int32
      numPages:
        type: integer
        format:  int32
      pictureUrl:
        type: string
      tags:
        type: "array"
        items:
          $ref: "#/definitions/Tag"
        xml:
          name: "tag"
      authors:
        type: "array"
        items:
          $ref: "#/definitions/Author"
        xml:
          name: "author"
    xml:
      name: "Book"
  Books:
    type: object
    properties:
      books:
        type: array
        items:
          $ref: "#/definitions/Book"
    xml:
      name: "Books"
  Tag:
    type: "object"
    properties:
      name:
        type: "string"
        example: "Biography"
    xml:
      name: "Tag"
  AuthenticatedUser:
    type: object
    properties:
      username:
        type: string
      hashedApiKey:
        type: string
      expires:
        type: string
  User:
    type: object
    properties:
      username:
        type: string
      password:
        type: string
      firstName:
        type: string
      lastName:
        type: string
      phone:
        type: string
    xml:
      name: User
  Author:
    type: "object"
    required:
    - "firstName"
    - "lastName"
    properties:
      id:
        type: "integer"
        format: "int64"
      firstName:
        type: "string"
        example: "John"
      lastName:
        type: "string"
        example: "Smith"
    xml:
      name: "Author"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"